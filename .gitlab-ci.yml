# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

# This file will build, test, analyse and report your project
# * Caches downloaded dependencies and plugins between invocation.

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=false -DdeployAtEnd=false"
  DOCKER_TLS_CERTDIR: ""

# run with docker in docker;
# needed because the embeded postgres DB tests run in a docker container
image: maven:3.9.6-eclipse-temurin-21-alpine

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

stages:
  - build
  - test
  - analyse
  - package
  - verify
  - attd
  - deploy
#  - sonarqube-check
#  - sonarqube-vulnerability-report

# This job compiles and packages the code.

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
build-job:
  stage: build
  script:
    - mvn $MAVEN_CLI_OPTS compile
    - echo "Approved by \${GITLAB_USER_LOGIN}, \${GITLAB_USER_NAME}"
  artifacts:
    when: always
    paths:
      - target/mrs*.jar

# This job runs the tests.
test-job:
  stage: test
  script:
    - mvn $MAVEN_CLI_OPTS test
  artifacts:
    when: always
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml


analyse-job:
  stage: analyse
  script: 
  # run only the analysis; all others already done
    - mvn checkstyle:check

package-job:
  stage: package
  script:
    - mvn package

verify-job:
  stage: verify
  services:
    - docker:dind
  script:
    - mvn verify
  artifacts:
    when: always
    reports:
      junit:
        - target/failsafe-reports/TEST-*.xml

# sonarqube-check:
#   stage: sonarqube-check
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#     GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script: 
#     - mvn verify sonar:sonar
#   allow_failure: true
#   only:
#     - merge_requests
#     - master
#     - main
#     - develop

# sonarqube-vulnerability-report:
#   stage: sonarqube-vulnerability-report
#   script:
#     - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=mrs-stqm&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
#   allow_failure: true
#   only:
#     - merge_requests
#     - master
#     - main
#     - develop
#   artifacts:
#     expire_in: 1 day
#     reports:
#       sast: gl-sast-sonar-report.json
#   dependencies:
#     - sonarqube-check
pages:
  stage: deploy
  script:
    - mvn site
    - mv target/site public
  artifacts:
    paths:
    - public

