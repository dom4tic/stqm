<?xml version="1.0" encoding="UTF-8"?>

<!-- This is the POM file specifically to execute the FitNesse tests only
     All other Maven build steps are executed in the default pom.xml file.
     
     Separating the FitNesse into its own POM file brings several advantages
     -  The used fitnesse-launcher plugin needs uite some configuration, this would enlarge the standard 
        pom file quite a bit and would make it more complex.
     -  It allows to specify the fit test execution without doing other tasks like, unit or integration test
     
 -->
 
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>ch.fhnw.swc</groupId>
	<artifactId>mrs</artifactId>
	<version>1.0-SNAPSHOT</version>
	<name>Movie Rental System</name>
	<properties>
        <!-- The following setting avoids the error during mvn site: [ERROR] Error 
            fetching link: C:\_data\1_edu_ba\stqm\projects\mrs-hs20    arget\javadoc-bundle-options. -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.release>18</maven.compiler.release>
        <project.config.dir>${project.basedir}/src/main/config</project.config.dir>
        <mainClass>ch.fhnw.swc.mrs.Application</mainClass>

        <!-- dependencies -->
        <junit.jupiter.version>5.9.1</junit.jupiter.version>
        <mockito.core.version>4.8.0</mockito.core.version>
        <hamcrest.version>2.2</hamcrest.version>
        <log4j.core.version>2.19.0</log4j.core.version>
        <slf4j.simple.version>2.0.3</slf4j.simple.version>
        <commons-csv.version>1.9.0</commons-csv.version>
        <hibernate.version>6.1.4.Final</hibernate.version>
        <hsqldb.version>2.7.1</hsqldb.version>
        <assertj.version>3.22.0</assertj.version>
        <fitnesse.version>20221102</fitnesse.version>

        <dbunit.version>2.7.2</dbunit.version>
        <dependency.locations.enabled>false</dependency.locations.enabled>
        <io-rest-assured.version>5.2.0</io-rest-assured.version>
        <jackson.version>2.13.4</jackson.version>
        <sparkjava.version>2.9.4</sparkjava.version>
        <!--  IMPORTANT: version 1.0.0 and higher uses the docker 
              testcontainers library. This requires Docker to be installed
              and running on your machine to run the integration tests
              with the embedded postgres database 
         -->
        <postgresql.version>42.5.0</postgresql.version>
        <commons-cli.version>1.4</commons-cli.version>

        <!-- plugins -->
        <maven-site.version>3.12.1</maven-site.version>
        <maven-compiler.version>3.10.1</maven-compiler.version>
        <maven-surefire.version>3.0.0-M7</maven-surefire.version>
        <maven-failsafe.version>3.0.0-M7</maven-failsafe.version>
        <maven-shade.version>3.4.0</maven-shade.version>
        <maven-checkstyle.version>3.2.0</maven-checkstyle.version>
        <jacoco-maven.version>0.8.8</jacoco-maven.version>
        <maven-project-info-reports.version>3.4.1</maven-project-info-reports.version>
        <maven-javadoc.version>3.4.1</maven-javadoc.version>
	</properties>

	<build>

		<resources>
			<resource>
				<directory>src/main/java</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>
		<testResources>
		  <testResource>
                <directory>src/test/resources</directory>
		  </testResource>
		</testResources>

		<plugins>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler.version}</version>
				<configuration>
                    <compilerArgs>
                         <!-- Prevents recompilation due to missing package-info.class, see 
                          MCOMPILER-205 -->
                        <arg>-Xpkginfo:always</arg>
                    </compilerArgs>
				</configuration>
			</plugin>

            <!-- we only execute the fitnesse test in the verify phase, so we skip here the unit tests -->
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>			
                <artifactId>maven-surefire-plugin</artifactId>
 				<version>${maven-surefire.version}</version>
 				<configuration>
 					<skipTests>true</skipTests>
 				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.2.0</version>
				<executions>
					<execution>
						<id>plugins</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/fitnesse</outputDirectory>
							<resources>
								<resource>
									<directory>src/test/fitnesse</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>frontpage</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/fitnesse/FitNesseRoot/FrontPage</outputDirectory>
							<resources>
								<resource>
									<directory>src/test/fitnesse/FrontPage</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>uk.co.javahelp.fitnesse</groupId>
				<artifactId>fitnesse-launcher-maven-plugin</artifactId>
				<version>1.4.2</version>
				
				<configuration>
					<!-- Since version 1.5.0 -->
					<maxErrorsToConsole>1</maxErrorsToConsole>
					
					<!-- Since version 1.4.0 -->
			    	<launches>
    			    	<launch>
        					<suite>MovieRentalSystem</suite>
    			    	</launch>
					</launches>
					<useProjectDependencies>
						<scope>test</scope>
						<scope>runtime</scope>
						<scope>compile</scope>
					</useProjectDependencies>
				</configuration>
			</plugin>

		</plugins>

	</build>


  	<profiles>
		<profile>
			<id>wiki</id>
			<!-- 
           		This profile is for use when writing tests using the FitNesse wiki.
				Simply run 'mvn verify -P wiki' and use a browser to visit http://localhost:9123/JavaExample
			 -->
			<build>
				<plugins>
					<plugin>
						<groupId>uk.co.javahelp.fitnesse</groupId>
						<artifactId>fitnesse-launcher-maven-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>set-up</goal>
									<goal>wiki</goal>
									<goal>tear-down</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>auto</id>
			<!-- 
           		This profile will boot FitNesse to automatically run the configured test suite. Simply run 'mvn verify -P auto'
			 -->
			<build>
				<plugins>
					<plugin>
						<groupId>uk.co.javahelp.fitnesse</groupId>
						<artifactId>fitnesse-launcher-maven-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>set-up</goal>
									<goal>run-tests</goal>
									<goal>tear-down</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	
	<dependencies>


        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest-core -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <version>${hamcrest.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.core.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>${io-rest-assured.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j.core.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j.core.version}</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>${slf4j.simple.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-csv</artifactId>
            <version>${commons-csv.version}</version>
        </dependency>

        <dependency>
            <groupId>com.sparkjava</groupId>
            <artifactId>spark-core</artifactId>
            <version>${sparkjava.version}</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>${hibernate.version}</version>
        </dependency>

        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <version>${hsqldb.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.22.0</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-db</artifactId>
            <version>2.0.2</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.dbunit</groupId>
            <artifactId>dbunit</artifactId>
            <version>${dbunit.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/commons-cli/commons-cli -->
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>${commons-cli.version}</version>
            <scope>test</scope>
        </dependency>

		<!-- https://mvnrepository.com/artifact/org.fitnesse/fitnesse -->
		<dependency>
		    <groupId>org.fitnesse</groupId>
		    <artifactId>fitnesse</artifactId>
		    <version>${fitnesse.version}</version>
		    <scope>provided</scope>
		</dependency>

	</dependencies>
	<url>https://web.fhnw.ch/plattformen/swc/</url>
</project>	